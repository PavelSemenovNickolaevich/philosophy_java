package jdbc.starter;

import jdbc.starter.util.ConnectionManager;
import org.postgresql.Driver;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class JdbcRunner {

    public static void main(String[] args) throws SQLException {
//Class<Driver> driverClass = Driver.class;
//        String sqlCreate = "create table if not exists info(" +
//                "id serial primary key," +
//                "data text not null )";
 //       String sqlInsert = "insert into table ";
//        String sqlUpdate = "update flight_repository.public.info " +
//                "set data = 'TestTest' where id=5";

        //Пример через result set
//        String sqlSelect = "select * from  flight_repository.public.ticket";
//        try (var connection = ConnectionManager.open()) {
//            var statement = connection.createStatement();
//            System.out.println(connection.getSchema());
//            System.out.println(connection.getTransactionIsolation());
//            var executeResult = statement.executeQuery(sqlSelect);
//            while (executeResult.next()) {
//                System.out.println(executeResult.getLong("id"));
//                System.out.println(executeResult.getString("passenger_no"));
//                System.out.println(executeResult.getBigDecimal("cost"));
//                System.out.println("----------------");
//            }
//           // var executeResult = statement.execute(sqlSelect);
//           // System.out.println(executeResult);
////            System.out.println(statement.getUpdateCount());
//        }

        Class<Driver> driverClass = Driver.class;
//        String sql = """
//                INSERT INTO info (data)
//                VALUES
//                ('autogenerated')
//                """;
        String sql = "insert into flight_repository.public.info(data) values ('autogenerated')";
        try (var connection = ConnectionManager.open();
             var statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE)) {
            System.out.println(connection.getSchema());
            System.out.println(connection.getTransactionIsolation());

            var executeResult = statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
            var generatedKeys = statement.getGeneratedKeys();
            if (generatedKeys.next()) {
                var generatedId = generatedKeys.getInt("id");
                System.out.println(generatedId);
            }
        }
    }
}
